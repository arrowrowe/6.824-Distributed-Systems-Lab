package main

import "os"
import "fmt"
import "mapreduce"
import "strings"
import "unicode"
import "strconv"

import "container/list"

// our simplified version of MapReduce does not supply a
// key to the Map function, as in the paper; only a value,
// which is a part of the input file content. the return
// value should be a list of key/value pairs, each represented
// by a mapreduce.KeyValue.
func Map(value string) *list.List {

	// Split string into words.
	// See [string.FieldsFunc](https://golang.org/pkg/strings/#FieldsFunc).
	words := strings.FieldsFunc(value, func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	})

	// Map each word to a key-value pair.
	// See [Package list](https://golang.org/pkg/container/list/).
	pairs := list.New()
	// See [Arrays, Slices and Maps](https://www.golang-book.com/books/intro/6).
	for _, word := range words {
		pairs.PushBack(mapreduce.KeyValue{word, "1"})
	}
	return pairs

}

// called once for each key generated by Map, with a list
// of that key's string value. should return a single
// output value for that key.
// NOTE: Here `values` is a list of values, each matches the same specified key, NOT of key-value pairs.
func Reduce(key string, values *list.List) string {
	total := 0
	// See [Package list](https://golang.org/pkg/container/list/).
	for e := values.Front(); e != nil; e = e.Next() {
		// See [Package strconv](https://golang.org/pkg/strconv/).
		// See [Type Assertion](http://stackoverflow.com/questions/14289256/cannot-convert-data-type-interface-to-type-string-need-type-assertion).
		delta, _ := strconv.Atoi(e.Value.(string))
		total += delta
	}
	return strconv.Itoa(total)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master x.txt sequential)
// 2) Master (e.g., go run wc.go master x.txt localhost:7777)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) != 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		if os.Args[3] == "sequential" {
			mapreduce.RunSingle(5, 3, os.Args[2], Map, Reduce)
		} else {
			mr := mapreduce.MakeMapReduce(5, 3, os.Args[2], os.Args[3])
			// Wait until MR is done
			<-mr.DoneChannel
		}
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], Map, Reduce, 100)
	}
}
